import java.util.LinkedList;

public class Solution {
	public LinkedList<String> letterCombinations(String digits) {
		LinkedList<String> list = new LinkedList<String>();
		if (digits.equals(""))
			return list;
		dfs(list, 0, digits, "");
		return list;
	}

	void dfs(LinkedList<String> list, int tot, String digits, String current) {
		if (tot == digits.length()) {
			list.add(current);
			return;
		} else {
			char ch = digits.charAt(tot);
			char arr[] = match(ch);
			for (int i = 0; i < arr.length; i++) {
				dfs(list, tot + 1, digits, current + arr[i]);
			}
		}
	}

	char[] match(char ch) {
		char[] ret = null;
		switch (ch) {
		case '2':
			return new char[] { 'a', 'b', 'c' };
		case '3':
			return new char[] { 'd', 'e', 'f' };
		case '4':
			return new char[] { 'g', 'h', 'i' };
		case '5':
			return new char[] { 'j', 'k', 'l' };
		case '6':
			return new char[] { 'm', 'n', 'o' };
		case '7':
			return new char[] { 'p', 'q', 'r', 's' };
		case '8':
			return new char[] { 't', 'u', 'v' };
		case '9':
			return new char[] { 'w', 'x', 'y', 'z' };
		case '*':
			return new char[] { '+' };
		case '0':
			return new char[] { ' ' };
		}
		return ret;
	}
}
